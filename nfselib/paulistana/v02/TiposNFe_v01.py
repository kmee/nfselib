#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Jul 22 06:40:30 2020 by generateDS.py version 2.30.15.
# Python 3.8.3 (default, May 17 2020, 18:15:42)  [GCC 10.1.0]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('--no-collect-includes', '')
#   ('--use-getter-setter', 'none')
#   ('-f', '')
#   ('-o', './paulistanalib/v02/TiposNFe_v01.py')
#
# Command line arguments:
#   ./process_includes/TiposNFe_v01.xsd
#
# Command line:
#   /home/mileo/Projects/oca12/bin/erpbrasil-edoc-gen-generate-python --no-namespace-defs --no-collect-includes --use-getter-setter="none" -f -o "./paulistanalib/v02/TiposNFe_v01.py" ./process_includes/TiposNFe_v01.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import os
import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class tpOpcaoSimples(object):
    _0='0'
    _1='1'
    _2='2'
    _3='3'


class tpStatusNFe(object):
    N='N'
    C='C'
    E='E'


class tpTipoRPS(object):
    RPS='RPS'
    RPSM='RPS-M'
    RPSC='RPS-C'


class tpEvento(GeneratedsSuper):
    """Chave para identificação da origem do evento."""
    subclass = None
    superclass = None
    def __init__(self, Codigo=None, Descricao=None, ChaveRPS=None, ChaveNFe=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Codigo = Codigo
        self.validate_tpCodigoEvento(self.Codigo)
        self.Descricao = Descricao
        self.validate_tpDescricaoEvento(self.Descricao)
        self.ChaveRPS = ChaveRPS
        self.ChaveNFe = ChaveNFe
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpEvento)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpEvento.subclass:
            return tpEvento.subclass(*args_, **kwargs_)
        else:
            return tpEvento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tpCodigoEvento(self, value):
        # Validate type tpCodigoEvento, a restriction on xs:short.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpCodigoEvento_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpCodigoEvento_patterns_, ))
    validate_tpCodigoEvento_patterns_ = [['^[0-9]{3,4}$']]
    def validate_tpDescricaoEvento(self, value):
        # Validate type tpDescricaoEvento, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 300:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpDescricaoEvento' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpDescricaoEvento' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Codigo is not None or
            self.Descricao is not None or
            self.ChaveRPS is not None or
            self.ChaveNFe is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpEvento', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpEvento')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tpEvento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tpEvento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tpEvento'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpEvento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Codigo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigo>%s</%sCodigo>%s' % (namespaceprefix_ , self.gds_format_integer(self.Codigo, input_name='Codigo'), namespaceprefix_ , eol_))
        if self.Descricao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescricao>%s</%sDescricao>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Descricao), input_name='Descricao')), namespaceprefix_ , eol_))
        if self.ChaveRPS is not None:
            self.ChaveRPS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ChaveRPS', pretty_print=pretty_print)
        if self.ChaveNFe is not None:
            self.ChaveNFe.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ChaveNFe', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Codigo' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Codigo')
            self.Codigo = ival_
            # validate type tpCodigoEvento
            self.validate_tpCodigoEvento(self.Codigo)
        elif nodeName_ == 'Descricao':
            Descricao_ = child_.text
            Descricao_ = self.gds_validate_string(Descricao_, node, 'Descricao')
            self.Descricao = Descricao_
            # validate type tpDescricaoEvento
            self.validate_tpDescricaoEvento(self.Descricao)
        elif nodeName_ == 'ChaveRPS':
            obj_ = tpChaveRPS.factory(parent_object_=self)
            obj_.build(child_)
            self.ChaveRPS = obj_
            obj_.original_tagname_ = 'ChaveRPS'
        elif nodeName_ == 'ChaveNFe':
            obj_ = tpChaveNFe.factory(parent_object_=self)
            obj_.build(child_)
            self.ChaveNFe = obj_
            obj_.original_tagname_ = 'ChaveNFe'
# end class tpEvento


class tpCPFCNPJ(GeneratedsSuper):
    """Tipo que representa um CPF/CNPJ."""
    subclass = None
    superclass = None
    def __init__(self, CPF=None, CNPJ=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CPF = CPF
        self.validate_tpCPF(self.CPF)
        self.CNPJ = CNPJ
        self.validate_tpCNPJ(self.CNPJ)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpCPFCNPJ)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpCPFCNPJ.subclass:
            return tpCPFCNPJ.subclass(*args_, **kwargs_)
        else:
            return tpCPFCNPJ(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tpCPF(self, value):
        # Validate type tpCPF, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpCPF_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpCPF_patterns_, ))
    validate_tpCPF_patterns_ = [['^[0-9]{0}|[0-9]{11}$']]
    def validate_tpCNPJ(self, value):
        # Validate type tpCNPJ, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpCNPJ_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpCNPJ_patterns_, ))
    validate_tpCNPJ_patterns_ = [['^[0-9]{14}$']]
    def hasContent_(self):
        if (
            self.CPF is not None or
            self.CNPJ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpCPFCNPJ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpCPFCNPJ')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tpCPFCNPJ')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tpCPFCNPJ', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tpCPFCNPJ'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpCPFCNPJ', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CPF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCPF>%s</%sCPF>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CPF), input_name='CPF')), namespaceprefix_ , eol_))
        if self.CNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNPJ>%s</%sCNPJ>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CNPJ), input_name='CNPJ')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CPF':
            CPF_ = child_.text
            CPF_ = self.gds_validate_string(CPF_, node, 'CPF')
            self.CPF = CPF_
            # validate type tpCPF
            self.validate_tpCPF(self.CPF)
        elif nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
            # validate type tpCNPJ
            self.validate_tpCNPJ(self.CNPJ)
# end class tpCPFCNPJ


class tpChaveNFeRPS(GeneratedsSuper):
    """Tipo que representa a chave de uma NFS-e e a Chave do RPS que a
    mesma substitui."""
    subclass = None
    superclass = None
    def __init__(self, ChaveNFe=None, ChaveRPS=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ChaveNFe = ChaveNFe
        self.ChaveRPS = ChaveRPS
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpChaveNFeRPS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpChaveNFeRPS.subclass:
            return tpChaveNFeRPS.subclass(*args_, **kwargs_)
        else:
            return tpChaveNFeRPS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.ChaveNFe is not None or
            self.ChaveRPS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpChaveNFeRPS', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpChaveNFeRPS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tpChaveNFeRPS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tpChaveNFeRPS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tpChaveNFeRPS'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpChaveNFeRPS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChaveNFe is not None:
            self.ChaveNFe.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ChaveNFe', pretty_print=pretty_print)
        if self.ChaveRPS is not None:
            self.ChaveRPS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ChaveRPS', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChaveNFe':
            obj_ = tpChaveNFe.factory(parent_object_=self)
            obj_.build(child_)
            self.ChaveNFe = obj_
            obj_.original_tagname_ = 'ChaveNFe'
        elif nodeName_ == 'ChaveRPS':
            obj_ = tpChaveRPS.factory(parent_object_=self)
            obj_.build(child_)
            self.ChaveRPS = obj_
            obj_.original_tagname_ = 'ChaveRPS'
# end class tpChaveNFeRPS


class tpChaveNFe(GeneratedsSuper):
    """Chave de identificação da NFS-e."""
    subclass = None
    superclass = None
    def __init__(self, InscricaoPrestador=None, NumeroNFe=None, CodigoVerificacao=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.InscricaoPrestador = InscricaoPrestador
        self.validate_tpInscricaoMunicipal(self.InscricaoPrestador)
        self.NumeroNFe = NumeroNFe
        self.validate_tpNumero(self.NumeroNFe)
        self.CodigoVerificacao = CodigoVerificacao
        self.validate_tpCodigoVerificacao(self.CodigoVerificacao)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpChaveNFe)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpChaveNFe.subclass:
            return tpChaveNFe.subclass(*args_, **kwargs_)
        else:
            return tpChaveNFe(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tpInscricaoMunicipal(self, value):
        # Validate type tpInscricaoMunicipal, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpInscricaoMunicipal_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpInscricaoMunicipal_patterns_, ))
    validate_tpInscricaoMunicipal_patterns_ = [['^[0-9]{8,8}$']]
    def validate_tpNumero(self, value):
        # Validate type tpNumero, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpNumero_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpNumero_patterns_, ))
    validate_tpNumero_patterns_ = [['^[0-9]{1,12}$']]
    def validate_tpCodigoVerificacao(self, value):
        # Validate type tpCodigoVerificacao, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 8:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpCodigoVerificacao' % {"value" : value.encode("utf-8")} )
            if len(value) < 8:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpCodigoVerificacao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.InscricaoPrestador is not None or
            self.NumeroNFe is not None or
            self.CodigoVerificacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpChaveNFe', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpChaveNFe')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tpChaveNFe')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tpChaveNFe', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tpChaveNFe'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpChaveNFe', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InscricaoPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoPrestador>%s</%sInscricaoPrestador>%s' % (namespaceprefix_ , self.gds_format_integer(self.InscricaoPrestador, input_name='InscricaoPrestador'), namespaceprefix_ , eol_))
        if self.NumeroNFe is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroNFe>%s</%sNumeroNFe>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroNFe, input_name='NumeroNFe'), namespaceprefix_ , eol_))
        if self.CodigoVerificacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoVerificacao>%s</%sCodigoVerificacao>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CodigoVerificacao), input_name='CodigoVerificacao')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InscricaoPrestador' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoPrestador')
            self.InscricaoPrestador = ival_
            # validate type tpInscricaoMunicipal
            self.validate_tpInscricaoMunicipal(self.InscricaoPrestador)
        elif nodeName_ == 'NumeroNFe' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroNFe')
            self.NumeroNFe = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.NumeroNFe)
        elif nodeName_ == 'CodigoVerificacao':
            CodigoVerificacao_ = child_.text
            CodigoVerificacao_ = self.gds_validate_string(CodigoVerificacao_, node, 'CodigoVerificacao')
            self.CodigoVerificacao = CodigoVerificacao_
            # validate type tpCodigoVerificacao
            self.validate_tpCodigoVerificacao(self.CodigoVerificacao)
# end class tpChaveNFe


class tpChaveRPS(GeneratedsSuper):
    """Tipo que define a chave identificadora de um RPS."""
    subclass = None
    superclass = None
    def __init__(self, InscricaoPrestador=None, SerieRPS=None, NumeroRPS=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.InscricaoPrestador = InscricaoPrestador
        self.validate_tpInscricaoMunicipal(self.InscricaoPrestador)
        self.SerieRPS = SerieRPS
        self.validate_tpSerieRPS(self.SerieRPS)
        self.NumeroRPS = NumeroRPS
        self.validate_tpNumero(self.NumeroRPS)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpChaveRPS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpChaveRPS.subclass:
            return tpChaveRPS.subclass(*args_, **kwargs_)
        else:
            return tpChaveRPS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tpInscricaoMunicipal(self, value):
        # Validate type tpInscricaoMunicipal, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpInscricaoMunicipal_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpInscricaoMunicipal_patterns_, ))
    validate_tpInscricaoMunicipal_patterns_ = [['^[0-9]{8,8}$']]
    def validate_tpSerieRPS(self, value):
        # Validate type tpSerieRPS, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 5:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpSerieRPS' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpSerieRPS' % {"value" : value.encode("utf-8")} )
    def validate_tpNumero(self, value):
        # Validate type tpNumero, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpNumero_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpNumero_patterns_, ))
    validate_tpNumero_patterns_ = [['^[0-9]{1,12}$']]
    def hasContent_(self):
        if (
            self.InscricaoPrestador is not None or
            self.SerieRPS is not None or
            self.NumeroRPS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpChaveRPS', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpChaveRPS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tpChaveRPS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tpChaveRPS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tpChaveRPS'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpChaveRPS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InscricaoPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoPrestador>%s</%sInscricaoPrestador>%s' % (namespaceprefix_ , self.gds_format_integer(self.InscricaoPrestador, input_name='InscricaoPrestador'), namespaceprefix_ , eol_))
        if self.SerieRPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerieRPS>%s</%sSerieRPS>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SerieRPS), input_name='SerieRPS')), namespaceprefix_ , eol_))
        if self.NumeroRPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroRPS>%s</%sNumeroRPS>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroRPS, input_name='NumeroRPS'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InscricaoPrestador' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoPrestador')
            self.InscricaoPrestador = ival_
            # validate type tpInscricaoMunicipal
            self.validate_tpInscricaoMunicipal(self.InscricaoPrestador)
        elif nodeName_ == 'SerieRPS':
            SerieRPS_ = child_.text
            SerieRPS_ = self.gds_validate_string(SerieRPS_, node, 'SerieRPS')
            self.SerieRPS = SerieRPS_
            # validate type tpSerieRPS
            self.validate_tpSerieRPS(self.SerieRPS)
        elif nodeName_ == 'NumeroRPS' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroRPS')
            self.NumeroRPS = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.NumeroRPS)
# end class tpChaveRPS


class tpEndereco(GeneratedsSuper):
    """Tipo Endereço."""
    subclass = None
    superclass = None
    def __init__(self, TipoLogradouro=None, Logradouro=None, NumeroEndereco=None, ComplementoEndereco=None, Bairro=None, Cidade=None, UF=None, CEP=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.TipoLogradouro = TipoLogradouro
        self.validate_tpTipoLogradouro(self.TipoLogradouro)
        self.Logradouro = Logradouro
        self.validate_tpLogradouro(self.Logradouro)
        self.NumeroEndereco = NumeroEndereco
        self.validate_tpNumeroEndereco(self.NumeroEndereco)
        self.ComplementoEndereco = ComplementoEndereco
        self.validate_tpComplementoEndereco(self.ComplementoEndereco)
        self.Bairro = Bairro
        self.validate_tpBairro(self.Bairro)
        self.Cidade = Cidade
        self.validate_tpCidade(self.Cidade)
        self.UF = UF
        self.validate_tpUF(self.UF)
        self.CEP = CEP
        self.validate_tpCEP(self.CEP)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpEndereco)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpEndereco.subclass:
            return tpEndereco.subclass(*args_, **kwargs_)
        else:
            return tpEndereco(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tpTipoLogradouro(self, value):
        # Validate type tpTipoLogradouro, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpTipoLogradouro' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpTipoLogradouro' % {"value" : value.encode("utf-8")} )
    def validate_tpLogradouro(self, value):
        # Validate type tpLogradouro, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 50:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpLogradouro' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpLogradouro' % {"value" : value.encode("utf-8")} )
    def validate_tpNumeroEndereco(self, value):
        # Validate type tpNumeroEndereco, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpNumeroEndereco' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpNumeroEndereco' % {"value" : value.encode("utf-8")} )
    def validate_tpComplementoEndereco(self, value):
        # Validate type tpComplementoEndereco, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 30:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpComplementoEndereco' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpComplementoEndereco' % {"value" : value.encode("utf-8")} )
    def validate_tpBairro(self, value):
        # Validate type tpBairro, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 30:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpBairro' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpBairro' % {"value" : value.encode("utf-8")} )
    def validate_tpCidade(self, value):
        # Validate type tpCidade, a restriction on xs:int.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpCidade_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpCidade_patterns_, ))
    validate_tpCidade_patterns_ = [['^[0-9]{7}$']]
    def validate_tpUF(self, value):
        # Validate type tpUF, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpUF' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpUF' % {"value" : value.encode("utf-8")} )
    def validate_tpCEP(self, value):
        # Validate type tpCEP, a restriction on xs:int.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpCEP_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpCEP_patterns_, ))
    validate_tpCEP_patterns_ = [['^[0-9]{7,8}$']]
    def hasContent_(self):
        if (
            self.TipoLogradouro is not None or
            self.Logradouro is not None or
            self.NumeroEndereco is not None or
            self.ComplementoEndereco is not None or
            self.Bairro is not None or
            self.Cidade is not None or
            self.UF is not None or
            self.CEP is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpEndereco', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpEndereco')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tpEndereco')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tpEndereco', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tpEndereco'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpEndereco', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TipoLogradouro is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTipoLogradouro>%s</%sTipoLogradouro>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TipoLogradouro), input_name='TipoLogradouro')), namespaceprefix_ , eol_))
        if self.Logradouro is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLogradouro>%s</%sLogradouro>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Logradouro), input_name='Logradouro')), namespaceprefix_ , eol_))
        if self.NumeroEndereco is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroEndereco>%s</%sNumeroEndereco>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumeroEndereco), input_name='NumeroEndereco')), namespaceprefix_ , eol_))
        if self.ComplementoEndereco is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComplementoEndereco>%s</%sComplementoEndereco>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ComplementoEndereco), input_name='ComplementoEndereco')), namespaceprefix_ , eol_))
        if self.Bairro is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBairro>%s</%sBairro>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Bairro), input_name='Bairro')), namespaceprefix_ , eol_))
        if self.Cidade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCidade>%s</%sCidade>%s' % (namespaceprefix_ , self.gds_format_integer(self.Cidade, input_name='Cidade'), namespaceprefix_ , eol_))
        if self.UF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUF>%s</%sUF>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UF), input_name='UF')), namespaceprefix_ , eol_))
        if self.CEP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCEP>%s</%sCEP>%s' % (namespaceprefix_ , self.gds_format_integer(self.CEP, input_name='CEP'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TipoLogradouro':
            TipoLogradouro_ = child_.text
            TipoLogradouro_ = self.gds_validate_string(TipoLogradouro_, node, 'TipoLogradouro')
            self.TipoLogradouro = TipoLogradouro_
            # validate type tpTipoLogradouro
            self.validate_tpTipoLogradouro(self.TipoLogradouro)
        elif nodeName_ == 'Logradouro':
            Logradouro_ = child_.text
            Logradouro_ = self.gds_validate_string(Logradouro_, node, 'Logradouro')
            self.Logradouro = Logradouro_
            # validate type tpLogradouro
            self.validate_tpLogradouro(self.Logradouro)
        elif nodeName_ == 'NumeroEndereco':
            NumeroEndereco_ = child_.text
            NumeroEndereco_ = self.gds_validate_string(NumeroEndereco_, node, 'NumeroEndereco')
            self.NumeroEndereco = NumeroEndereco_
            # validate type tpNumeroEndereco
            self.validate_tpNumeroEndereco(self.NumeroEndereco)
        elif nodeName_ == 'ComplementoEndereco':
            ComplementoEndereco_ = child_.text
            ComplementoEndereco_ = self.gds_validate_string(ComplementoEndereco_, node, 'ComplementoEndereco')
            self.ComplementoEndereco = ComplementoEndereco_
            # validate type tpComplementoEndereco
            self.validate_tpComplementoEndereco(self.ComplementoEndereco)
        elif nodeName_ == 'Bairro':
            Bairro_ = child_.text
            Bairro_ = self.gds_validate_string(Bairro_, node, 'Bairro')
            self.Bairro = Bairro_
            # validate type tpBairro
            self.validate_tpBairro(self.Bairro)
        elif nodeName_ == 'Cidade' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Cidade')
            self.Cidade = ival_
            # validate type tpCidade
            self.validate_tpCidade(self.Cidade)
        elif nodeName_ == 'UF':
            UF_ = child_.text
            UF_ = self.gds_validate_string(UF_, node, 'UF')
            self.UF = UF_
            # validate type tpUF
            self.validate_tpUF(self.UF)
        elif nodeName_ == 'CEP' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CEP')
            self.CEP = ival_
            # validate type tpCEP
            self.validate_tpCEP(self.CEP)
# end class tpEndereco


class tpInformacoesLote(GeneratedsSuper):
    """Informações do lote processado."""
    subclass = None
    superclass = None
    def __init__(self, NumeroLote=None, InscricaoPrestador=None, CPFCNPJRemetente=None, DataEnvioLote=None, QtdNotasProcessadas=None, TempoProcessamento=None, ValorTotalServicos=None, ValorTotalDeducoes=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NumeroLote = NumeroLote
        self.validate_tpNumero(self.NumeroLote)
        self.InscricaoPrestador = InscricaoPrestador
        self.validate_tpInscricaoMunicipal(self.InscricaoPrestador)
        self.CPFCNPJRemetente = CPFCNPJRemetente
        if isinstance(DataEnvioLote, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataEnvioLote, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DataEnvioLote
        self.DataEnvioLote = initvalue_
        self.QtdNotasProcessadas = QtdNotasProcessadas
        self.validate_tpQuantidade(self.QtdNotasProcessadas)
        self.TempoProcessamento = TempoProcessamento
        self.validate_tpTempoProcessamento(self.TempoProcessamento)
        self.ValorTotalServicos = ValorTotalServicos
        self.validate_tpValor(self.ValorTotalServicos)
        self.ValorTotalDeducoes = ValorTotalDeducoes
        self.validate_tpValor(self.ValorTotalDeducoes)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpInformacoesLote)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpInformacoesLote.subclass:
            return tpInformacoesLote.subclass(*args_, **kwargs_)
        else:
            return tpInformacoesLote(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tpNumero(self, value):
        # Validate type tpNumero, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpNumero_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpNumero_patterns_, ))
    validate_tpNumero_patterns_ = [['^[0-9]{1,12}$']]
    def validate_tpInscricaoMunicipal(self, value):
        # Validate type tpInscricaoMunicipal, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpInscricaoMunicipal_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpInscricaoMunicipal_patterns_, ))
    validate_tpInscricaoMunicipal_patterns_ = [['^[0-9]{8,8}$']]
    def validate_tpQuantidade(self, value):
        # Validate type tpQuantidade, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpQuantidade_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpQuantidade_patterns_, ))
    validate_tpQuantidade_patterns_ = [['^[0-9]{1,15}$']]
    def validate_tpTempoProcessamento(self, value):
        # Validate type tpTempoProcessamento, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpTempoProcessamento_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpTempoProcessamento_patterns_, ))
    validate_tpTempoProcessamento_patterns_ = [['^[0-9]{1,15}$']]
    def validate_tpValor(self, value):
        # Validate type tpValor, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on tpValor' % {"value" : value} )
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tpValor' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_tpValor_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpValor_patterns_, ))
    validate_tpValor_patterns_ = [['^0|0\\.[0-9]{2}|[1-9]{1}[0-9]{0,12}(\\.[0-9]{0,2})?$']]
    def hasContent_(self):
        if (
            self.NumeroLote is not None or
            self.InscricaoPrestador is not None or
            self.CPFCNPJRemetente is not None or
            self.DataEnvioLote is not None or
            self.QtdNotasProcessadas is not None or
            self.TempoProcessamento is not None or
            self.ValorTotalServicos is not None or
            self.ValorTotalDeducoes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpInformacoesLote', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpInformacoesLote')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tpInformacoesLote')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tpInformacoesLote', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tpInformacoesLote'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpInformacoesLote', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroLote>%s</%sNumeroLote>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroLote, input_name='NumeroLote'), namespaceprefix_ , eol_))
        if self.InscricaoPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoPrestador>%s</%sInscricaoPrestador>%s' % (namespaceprefix_ , self.gds_format_integer(self.InscricaoPrestador, input_name='InscricaoPrestador'), namespaceprefix_ , eol_))
        if self.CPFCNPJRemetente is not None:
            self.CPFCNPJRemetente.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CPFCNPJRemetente', pretty_print=pretty_print)
        if self.DataEnvioLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataEnvioLote>%s</%sDataEnvioLote>%s' % (namespaceprefix_ , self.gds_format_datetime(self.DataEnvioLote, input_name='DataEnvioLote'), namespaceprefix_ , eol_))
        if self.QtdNotasProcessadas is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQtdNotasProcessadas>%s</%sQtdNotasProcessadas>%s' % (namespaceprefix_ , self.gds_format_integer(self.QtdNotasProcessadas, input_name='QtdNotasProcessadas'), namespaceprefix_ , eol_))
        if self.TempoProcessamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTempoProcessamento>%s</%sTempoProcessamento>%s' % (namespaceprefix_ , self.gds_format_integer(self.TempoProcessamento, input_name='TempoProcessamento'), namespaceprefix_ , eol_))
        if self.ValorTotalServicos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorTotalServicos>%s</%sValorTotalServicos>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorTotalServicos, input_name='ValorTotalServicos'), namespaceprefix_ , eol_))
        if self.ValorTotalDeducoes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorTotalDeducoes>%s</%sValorTotalDeducoes>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorTotalDeducoes, input_name='ValorTotalDeducoes'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumeroLote' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroLote')
            self.NumeroLote = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.NumeroLote)
        elif nodeName_ == 'InscricaoPrestador' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoPrestador')
            self.InscricaoPrestador = ival_
            # validate type tpInscricaoMunicipal
            self.validate_tpInscricaoMunicipal(self.InscricaoPrestador)
        elif nodeName_ == 'CPFCNPJRemetente':
            obj_ = tpCPFCNPJ.factory(parent_object_=self)
            obj_.build(child_)
            self.CPFCNPJRemetente = obj_
            obj_.original_tagname_ = 'CPFCNPJRemetente'
        elif nodeName_ == 'DataEnvioLote':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DataEnvioLote = dval_
        elif nodeName_ == 'QtdNotasProcessadas' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'QtdNotasProcessadas')
            self.QtdNotasProcessadas = ival_
            # validate type tpQuantidade
            self.validate_tpQuantidade(self.QtdNotasProcessadas)
        elif nodeName_ == 'TempoProcessamento' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TempoProcessamento')
            self.TempoProcessamento = ival_
            # validate type tpTempoProcessamento
            self.validate_tpTempoProcessamento(self.TempoProcessamento)
        elif nodeName_ == 'ValorTotalServicos' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorTotalServicos')
            self.ValorTotalServicos = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorTotalServicos)
        elif nodeName_ == 'ValorTotalDeducoes' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorTotalDeducoes')
            self.ValorTotalDeducoes = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorTotalDeducoes)
# end class tpInformacoesLote


class tpNFe(GeneratedsSuper):
    """Tipo que representa uma NFS-e"""
    subclass = None
    superclass = None
    def __init__(self, Assinatura=None, ChaveNFe=None, DataEmissaoNFe=None, NumeroLote=None, ChaveRPS=None, TipoRPS=None, DataEmissaoRPS=None, CPFCNPJPrestador=None, RazaoSocialPrestador=None, EnderecoPrestador=None, EmailPrestador=None, StatusNFe=None, DataCancelamento=None, TributacaoNFe=None, OpcaoSimples=None, NumeroGuia=None, DataQuitacaoGuia=None, ValorServicos=None, ValorDeducoes=None, ValorPIS=None, ValorCOFINS=None, ValorINSS=None, ValorIR=None, ValorCSLL=None, CodigoServico=None, AliquotaServicos=None, ValorISS=None, ValorCredito=None, ISSRetido=None, CPFCNPJTomador=None, InscricaoMunicipalTomador=None, InscricaoEstadualTomador=None, RazaoSocialTomador=None, EnderecoTomador=None, EmailTomador=None, CPFCNPJIntermediario=None, InscricaoMunicipalIntermediario=None, ISSRetidoIntermediario=None, EmailIntermediario=None, Discriminacao=None, ValorCargaTributaria=None, PercentualCargaTributaria=None, FonteCargaTributaria=None, CodigoCEI=None, MatriculaObra=None, MunicipioPrestacao=None, NumeroEncapsulamento=None, ValorTotalRecebido=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Assinatura = Assinatura
        self.validate_tpAssinatura(self.Assinatura)
        self.ChaveNFe = ChaveNFe
        if isinstance(DataEmissaoNFe, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataEmissaoNFe, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DataEmissaoNFe
        self.DataEmissaoNFe = initvalue_
        self.NumeroLote = NumeroLote
        self.validate_tpNumero(self.NumeroLote)
        self.ChaveRPS = ChaveRPS
        self.TipoRPS = TipoRPS
        self.validate_tpTipoRPS(self.TipoRPS)
        if isinstance(DataEmissaoRPS, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataEmissaoRPS, '%Y-%m-%d').date()
        else:
            initvalue_ = DataEmissaoRPS
        self.DataEmissaoRPS = initvalue_
        self.CPFCNPJPrestador = CPFCNPJPrestador
        self.RazaoSocialPrestador = RazaoSocialPrestador
        self.validate_tpRazaoSocial(self.RazaoSocialPrestador)
        self.EnderecoPrestador = EnderecoPrestador
        self.EmailPrestador = EmailPrestador
        self.validate_tpEmail(self.EmailPrestador)
        self.StatusNFe = StatusNFe
        self.validate_tpStatusNFe(self.StatusNFe)
        if isinstance(DataCancelamento, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataCancelamento, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DataCancelamento
        self.DataCancelamento = initvalue_
        self.TributacaoNFe = TributacaoNFe
        self.validate_tpTributacaoNFe(self.TributacaoNFe)
        self.OpcaoSimples = OpcaoSimples
        self.validate_tpOpcaoSimples(self.OpcaoSimples)
        self.NumeroGuia = NumeroGuia
        self.validate_tpNumero(self.NumeroGuia)
        if isinstance(DataQuitacaoGuia, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataQuitacaoGuia, '%Y-%m-%d').date()
        else:
            initvalue_ = DataQuitacaoGuia
        self.DataQuitacaoGuia = initvalue_
        self.ValorServicos = ValorServicos
        self.validate_tpValor(self.ValorServicos)
        self.ValorDeducoes = ValorDeducoes
        self.validate_tpValor(self.ValorDeducoes)
        self.ValorPIS = ValorPIS
        self.validate_tpValor(self.ValorPIS)
        self.ValorCOFINS = ValorCOFINS
        self.validate_tpValor(self.ValorCOFINS)
        self.ValorINSS = ValorINSS
        self.validate_tpValor(self.ValorINSS)
        self.ValorIR = ValorIR
        self.validate_tpValor(self.ValorIR)
        self.ValorCSLL = ValorCSLL
        self.validate_tpValor(self.ValorCSLL)
        self.CodigoServico = CodigoServico
        self.validate_tpCodigoServico(self.CodigoServico)
        self.AliquotaServicos = AliquotaServicos
        self.validate_tpAliquota(self.AliquotaServicos)
        self.ValorISS = ValorISS
        self.validate_tpValor(self.ValorISS)
        self.ValorCredito = ValorCredito
        self.validate_tpValor(self.ValorCredito)
        self.ISSRetido = ISSRetido
        self.CPFCNPJTomador = CPFCNPJTomador
        self.InscricaoMunicipalTomador = InscricaoMunicipalTomador
        self.validate_tpInscricaoMunicipal(self.InscricaoMunicipalTomador)
        self.InscricaoEstadualTomador = InscricaoEstadualTomador
        self.validate_tpInscricaoEstadual(self.InscricaoEstadualTomador)
        self.RazaoSocialTomador = RazaoSocialTomador
        self.validate_tpRazaoSocial(self.RazaoSocialTomador)
        self.EnderecoTomador = EnderecoTomador
        self.EmailTomador = EmailTomador
        self.validate_tpEmail(self.EmailTomador)
        self.CPFCNPJIntermediario = CPFCNPJIntermediario
        self.InscricaoMunicipalIntermediario = InscricaoMunicipalIntermediario
        self.validate_tpInscricaoMunicipal(self.InscricaoMunicipalIntermediario)
        self.ISSRetidoIntermediario = ISSRetidoIntermediario
        self.EmailIntermediario = EmailIntermediario
        self.validate_tpEmail(self.EmailIntermediario)
        self.Discriminacao = Discriminacao
        self.validate_tpDiscriminacao(self.Discriminacao)
        self.ValorCargaTributaria = ValorCargaTributaria
        self.validate_tpValor(self.ValorCargaTributaria)
        self.PercentualCargaTributaria = PercentualCargaTributaria
        self.validate_tpPercentualCargaTributaria(self.PercentualCargaTributaria)
        self.FonteCargaTributaria = FonteCargaTributaria
        self.validate_tpFonteCargaTributaria(self.FonteCargaTributaria)
        self.CodigoCEI = CodigoCEI
        self.validate_tpNumero(self.CodigoCEI)
        self.MatriculaObra = MatriculaObra
        self.validate_tpNumero(self.MatriculaObra)
        self.MunicipioPrestacao = MunicipioPrestacao
        self.validate_tpCidade(self.MunicipioPrestacao)
        self.NumeroEncapsulamento = NumeroEncapsulamento
        self.validate_tpNumero(self.NumeroEncapsulamento)
        self.ValorTotalRecebido = ValorTotalRecebido
        self.validate_tpValor(self.ValorTotalRecebido)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpNFe)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpNFe.subclass:
            return tpNFe.subclass(*args_, **kwargs_)
        else:
            return tpNFe(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tpAssinatura(self, value):
        # Validate type tpAssinatura, a restriction on xs:base64Binary.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_tpNumero(self, value):
        # Validate type tpNumero, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpNumero_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpNumero_patterns_, ))
    validate_tpNumero_patterns_ = [['^[0-9]{1,12}$']]
    def validate_tpTipoRPS(self, value):
        # Validate type tpTipoRPS, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RPS', 'RPS-M', 'RPS-C']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tpTipoRPS' % {"value" : value.encode("utf-8")} )
    def validate_tpRazaoSocial(self, value):
        # Validate type tpRazaoSocial, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 75:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpRazaoSocial' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpRazaoSocial' % {"value" : value.encode("utf-8")} )
    def validate_tpEmail(self, value):
        # Validate type tpEmail, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 75:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpEmail' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpEmail' % {"value" : value.encode("utf-8")} )
    def validate_tpStatusNFe(self, value):
        # Validate type tpStatusNFe, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'C', 'E']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tpStatusNFe' % {"value" : value.encode("utf-8")} )
    def validate_tpTributacaoNFe(self, value):
        # Validate type tpTributacaoNFe, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpTributacaoNFe' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpTributacaoNFe' % {"value" : value.encode("utf-8")} )
    def validate_tpOpcaoSimples(self, value):
        # Validate type tpOpcaoSimples, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tpOpcaoSimples' % {"value" : value.encode("utf-8")} )
    def validate_tpValor(self, value):
        # Validate type tpValor, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on tpValor' % {"value" : value} )
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tpValor' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_tpValor_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpValor_patterns_, ))
    validate_tpValor_patterns_ = [['^0|0\\.[0-9]{2}|[1-9]{1}[0-9]{0,12}(\\.[0-9]{0,2})?$']]
    def validate_tpCodigoServico(self, value):
        # Validate type tpCodigoServico, a restriction on xs:int.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpCodigoServico_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpCodigoServico_patterns_, ))
    validate_tpCodigoServico_patterns_ = [['^[0-9]{4,5}$']]
    def validate_tpAliquota(self, value):
        # Validate type tpAliquota, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on tpAliquota' % {"value" : value} )
            if len(str(value)) >= 5:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tpAliquota' % {"value" : value} )
    def validate_tpInscricaoMunicipal(self, value):
        # Validate type tpInscricaoMunicipal, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpInscricaoMunicipal_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpInscricaoMunicipal_patterns_, ))
    validate_tpInscricaoMunicipal_patterns_ = [['^[0-9]{8,8}$']]
    def validate_tpInscricaoEstadual(self, value):
        # Validate type tpInscricaoEstadual, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpInscricaoEstadual_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpInscricaoEstadual_patterns_, ))
    validate_tpInscricaoEstadual_patterns_ = [['^[0-9]{1,19}$']]
    def validate_tpDiscriminacao(self, value):
        # Validate type tpDiscriminacao, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 2000:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpDiscriminacao' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpDiscriminacao' % {"value" : value.encode("utf-8")} )
    def validate_tpPercentualCargaTributaria(self, value):
        # Validate type tpPercentualCargaTributaria, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on tpPercentualCargaTributaria' % {"value" : value} )
            if len(str(value)) >= 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tpPercentualCargaTributaria' % {"value" : value} )
    def validate_tpFonteCargaTributaria(self, value):
        # Validate type tpFonteCargaTributaria, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpFonteCargaTributaria' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpFonteCargaTributaria' % {"value" : value.encode("utf-8")} )
    def validate_tpCidade(self, value):
        # Validate type tpCidade, a restriction on xs:int.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpCidade_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpCidade_patterns_, ))
    validate_tpCidade_patterns_ = [['^[0-9]{7}$']]
    def hasContent_(self):
        if (
            self.Assinatura is not None or
            self.ChaveNFe is not None or
            self.DataEmissaoNFe is not None or
            self.NumeroLote is not None or
            self.ChaveRPS is not None or
            self.TipoRPS is not None or
            self.DataEmissaoRPS is not None or
            self.CPFCNPJPrestador is not None or
            self.RazaoSocialPrestador is not None or
            self.EnderecoPrestador is not None or
            self.EmailPrestador is not None or
            self.StatusNFe is not None or
            self.DataCancelamento is not None or
            self.TributacaoNFe is not None or
            self.OpcaoSimples is not None or
            self.NumeroGuia is not None or
            self.DataQuitacaoGuia is not None or
            self.ValorServicos is not None or
            self.ValorDeducoes is not None or
            self.ValorPIS is not None or
            self.ValorCOFINS is not None or
            self.ValorINSS is not None or
            self.ValorIR is not None or
            self.ValorCSLL is not None or
            self.CodigoServico is not None or
            self.AliquotaServicos is not None or
            self.ValorISS is not None or
            self.ValorCredito is not None or
            self.ISSRetido is not None or
            self.CPFCNPJTomador is not None or
            self.InscricaoMunicipalTomador is not None or
            self.InscricaoEstadualTomador is not None or
            self.RazaoSocialTomador is not None or
            self.EnderecoTomador is not None or
            self.EmailTomador is not None or
            self.CPFCNPJIntermediario is not None or
            self.InscricaoMunicipalIntermediario is not None or
            self.ISSRetidoIntermediario is not None or
            self.EmailIntermediario is not None or
            self.Discriminacao is not None or
            self.ValorCargaTributaria is not None or
            self.PercentualCargaTributaria is not None or
            self.FonteCargaTributaria is not None or
            self.CodigoCEI is not None or
            self.MatriculaObra is not None or
            self.MunicipioPrestacao is not None or
            self.NumeroEncapsulamento is not None or
            self.ValorTotalRecebido is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpNFe', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpNFe')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tpNFe')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tpNFe', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tpNFe'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpNFe', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Assinatura is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssinatura>%s</%sAssinatura>%s' % (namespaceprefix_ , self.gds_format_base64(self.Assinatura, input_name='Assinatura'), namespaceprefix_ , eol_))
        if self.ChaveNFe is not None:
            self.ChaveNFe.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ChaveNFe', pretty_print=pretty_print)
        if self.DataEmissaoNFe is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataEmissaoNFe>%s</%sDataEmissaoNFe>%s' % (namespaceprefix_ , self.gds_format_datetime(self.DataEmissaoNFe, input_name='DataEmissaoNFe'), namespaceprefix_ , eol_))
        if self.NumeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroLote>%s</%sNumeroLote>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroLote, input_name='NumeroLote'), namespaceprefix_ , eol_))
        if self.ChaveRPS is not None:
            self.ChaveRPS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ChaveRPS', pretty_print=pretty_print)
        if self.TipoRPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTipoRPS>%s</%sTipoRPS>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TipoRPS), input_name='TipoRPS')), namespaceprefix_ , eol_))
        if self.DataEmissaoRPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataEmissaoRPS>%s</%sDataEmissaoRPS>%s' % (namespaceprefix_ , self.gds_format_date(self.DataEmissaoRPS, input_name='DataEmissaoRPS'), namespaceprefix_ , eol_))
        if self.CPFCNPJPrestador is not None:
            self.CPFCNPJPrestador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CPFCNPJPrestador', pretty_print=pretty_print)
        if self.RazaoSocialPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRazaoSocialPrestador>%s</%sRazaoSocialPrestador>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RazaoSocialPrestador), input_name='RazaoSocialPrestador')), namespaceprefix_ , eol_))
        if self.EnderecoPrestador is not None:
            self.EnderecoPrestador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EnderecoPrestador', pretty_print=pretty_print)
        if self.EmailPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailPrestador>%s</%sEmailPrestador>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailPrestador), input_name='EmailPrestador')), namespaceprefix_ , eol_))
        if self.StatusNFe is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusNFe>%s</%sStatusNFe>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusNFe), input_name='StatusNFe')), namespaceprefix_ , eol_))
        if self.DataCancelamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataCancelamento>%s</%sDataCancelamento>%s' % (namespaceprefix_ , self.gds_format_datetime(self.DataCancelamento, input_name='DataCancelamento'), namespaceprefix_ , eol_))
        if self.TributacaoNFe is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTributacaoNFe>%s</%sTributacaoNFe>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TributacaoNFe), input_name='TributacaoNFe')), namespaceprefix_ , eol_))
        if self.OpcaoSimples is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpcaoSimples>%s</%sOpcaoSimples>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OpcaoSimples), input_name='OpcaoSimples')), namespaceprefix_ , eol_))
        if self.NumeroGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroGuia>%s</%sNumeroGuia>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroGuia, input_name='NumeroGuia'), namespaceprefix_ , eol_))
        if self.DataQuitacaoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataQuitacaoGuia>%s</%sDataQuitacaoGuia>%s' % (namespaceprefix_ , self.gds_format_date(self.DataQuitacaoGuia, input_name='DataQuitacaoGuia'), namespaceprefix_ , eol_))
        if self.ValorServicos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorServicos>%s</%sValorServicos>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorServicos, input_name='ValorServicos'), namespaceprefix_ , eol_))
        if self.ValorDeducoes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorDeducoes>%s</%sValorDeducoes>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorDeducoes, input_name='ValorDeducoes'), namespaceprefix_ , eol_))
        if self.ValorPIS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorPIS>%s</%sValorPIS>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorPIS, input_name='ValorPIS'), namespaceprefix_ , eol_))
        if self.ValorCOFINS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCOFINS>%s</%sValorCOFINS>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorCOFINS, input_name='ValorCOFINS'), namespaceprefix_ , eol_))
        if self.ValorINSS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorINSS>%s</%sValorINSS>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorINSS, input_name='ValorINSS'), namespaceprefix_ , eol_))
        if self.ValorIR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorIR>%s</%sValorIR>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorIR, input_name='ValorIR'), namespaceprefix_ , eol_))
        if self.ValorCSLL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCSLL>%s</%sValorCSLL>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorCSLL, input_name='ValorCSLL'), namespaceprefix_ , eol_))
        if self.CodigoServico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoServico>%s</%sCodigoServico>%s' % (namespaceprefix_ , self.gds_format_integer(self.CodigoServico, input_name='CodigoServico'), namespaceprefix_ , eol_))
        if self.AliquotaServicos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAliquotaServicos>%s</%sAliquotaServicos>%s' % (namespaceprefix_ , self.gds_format_float(self.AliquotaServicos, input_name='AliquotaServicos'), namespaceprefix_ , eol_))
        if self.ValorISS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorISS>%s</%sValorISS>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorISS, input_name='ValorISS'), namespaceprefix_ , eol_))
        if self.ValorCredito is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCredito>%s</%sValorCredito>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorCredito, input_name='ValorCredito'), namespaceprefix_ , eol_))
        if self.ISSRetido is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISSRetido>%s</%sISSRetido>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ISSRetido, input_name='ISSRetido'), namespaceprefix_ , eol_))
        if self.CPFCNPJTomador is not None:
            self.CPFCNPJTomador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CPFCNPJTomador', pretty_print=pretty_print)
        if self.InscricaoMunicipalTomador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipalTomador>%s</%sInscricaoMunicipalTomador>%s' % (namespaceprefix_ , self.gds_format_integer(self.InscricaoMunicipalTomador, input_name='InscricaoMunicipalTomador'), namespaceprefix_ , eol_))
        if self.InscricaoEstadualTomador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoEstadualTomador>%s</%sInscricaoEstadualTomador>%s' % (namespaceprefix_ , self.gds_format_integer(self.InscricaoEstadualTomador, input_name='InscricaoEstadualTomador'), namespaceprefix_ , eol_))
        if self.RazaoSocialTomador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRazaoSocialTomador>%s</%sRazaoSocialTomador>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RazaoSocialTomador), input_name='RazaoSocialTomador')), namespaceprefix_ , eol_))
        if self.EnderecoTomador is not None:
            self.EnderecoTomador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EnderecoTomador', pretty_print=pretty_print)
        if self.EmailTomador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailTomador>%s</%sEmailTomador>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailTomador), input_name='EmailTomador')), namespaceprefix_ , eol_))
        if self.CPFCNPJIntermediario is not None:
            self.CPFCNPJIntermediario.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CPFCNPJIntermediario', pretty_print=pretty_print)
        if self.InscricaoMunicipalIntermediario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipalIntermediario>%s</%sInscricaoMunicipalIntermediario>%s' % (namespaceprefix_ , self.gds_format_integer(self.InscricaoMunicipalIntermediario, input_name='InscricaoMunicipalIntermediario'), namespaceprefix_ , eol_))
        if self.ISSRetidoIntermediario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISSRetidoIntermediario>%s</%sISSRetidoIntermediario>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISSRetidoIntermediario), input_name='ISSRetidoIntermediario')), namespaceprefix_ , eol_))
        if self.EmailIntermediario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailIntermediario>%s</%sEmailIntermediario>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailIntermediario), input_name='EmailIntermediario')), namespaceprefix_ , eol_))
        if self.Discriminacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDiscriminacao>%s</%sDiscriminacao>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Discriminacao), input_name='Discriminacao')), namespaceprefix_ , eol_))
        if self.ValorCargaTributaria is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCargaTributaria>%s</%sValorCargaTributaria>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorCargaTributaria, input_name='ValorCargaTributaria'), namespaceprefix_ , eol_))
        if self.PercentualCargaTributaria is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentualCargaTributaria>%s</%sPercentualCargaTributaria>%s' % (namespaceprefix_ , self.gds_format_float(self.PercentualCargaTributaria, input_name='PercentualCargaTributaria'), namespaceprefix_ , eol_))
        if self.FonteCargaTributaria is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFonteCargaTributaria>%s</%sFonteCargaTributaria>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FonteCargaTributaria), input_name='FonteCargaTributaria')), namespaceprefix_ , eol_))
        if self.CodigoCEI is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoCEI>%s</%sCodigoCEI>%s' % (namespaceprefix_ , self.gds_format_integer(self.CodigoCEI, input_name='CodigoCEI'), namespaceprefix_ , eol_))
        if self.MatriculaObra is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMatriculaObra>%s</%sMatriculaObra>%s' % (namespaceprefix_ , self.gds_format_integer(self.MatriculaObra, input_name='MatriculaObra'), namespaceprefix_ , eol_))
        if self.MunicipioPrestacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMunicipioPrestacao>%s</%sMunicipioPrestacao>%s' % (namespaceprefix_ , self.gds_format_integer(self.MunicipioPrestacao, input_name='MunicipioPrestacao'), namespaceprefix_ , eol_))
        if self.NumeroEncapsulamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroEncapsulamento>%s</%sNumeroEncapsulamento>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroEncapsulamento, input_name='NumeroEncapsulamento'), namespaceprefix_ , eol_))
        if self.ValorTotalRecebido is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorTotalRecebido>%s</%sValorTotalRecebido>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorTotalRecebido, input_name='ValorTotalRecebido'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Assinatura':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Assinatura')
            else:
                bval_ = None
            self.Assinatura = bval_
            # validate type tpAssinatura
            self.validate_tpAssinatura(self.Assinatura)
        elif nodeName_ == 'ChaveNFe':
            obj_ = tpChaveNFe.factory(parent_object_=self)
            obj_.build(child_)
            self.ChaveNFe = obj_
            obj_.original_tagname_ = 'ChaveNFe'
        elif nodeName_ == 'DataEmissaoNFe':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DataEmissaoNFe = dval_
        elif nodeName_ == 'NumeroLote' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroLote')
            self.NumeroLote = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.NumeroLote)
        elif nodeName_ == 'ChaveRPS':
            obj_ = tpChaveRPS.factory(parent_object_=self)
            obj_.build(child_)
            self.ChaveRPS = obj_
            obj_.original_tagname_ = 'ChaveRPS'
        elif nodeName_ == 'TipoRPS':
            TipoRPS_ = child_.text
            TipoRPS_ = self.gds_validate_string(TipoRPS_, node, 'TipoRPS')
            self.TipoRPS = TipoRPS_
            # validate type tpTipoRPS
            self.validate_tpTipoRPS(self.TipoRPS)
        elif nodeName_ == 'DataEmissaoRPS':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DataEmissaoRPS = dval_
        elif nodeName_ == 'CPFCNPJPrestador':
            obj_ = tpCPFCNPJ.factory(parent_object_=self)
            obj_.build(child_)
            self.CPFCNPJPrestador = obj_
            obj_.original_tagname_ = 'CPFCNPJPrestador'
        elif nodeName_ == 'RazaoSocialPrestador':
            RazaoSocialPrestador_ = child_.text
            RazaoSocialPrestador_ = self.gds_validate_string(RazaoSocialPrestador_, node, 'RazaoSocialPrestador')
            self.RazaoSocialPrestador = RazaoSocialPrestador_
            # validate type tpRazaoSocial
            self.validate_tpRazaoSocial(self.RazaoSocialPrestador)
        elif nodeName_ == 'EnderecoPrestador':
            obj_ = tpEndereco.factory(parent_object_=self)
            obj_.build(child_)
            self.EnderecoPrestador = obj_
            obj_.original_tagname_ = 'EnderecoPrestador'
        elif nodeName_ == 'EmailPrestador':
            EmailPrestador_ = child_.text
            EmailPrestador_ = self.gds_validate_string(EmailPrestador_, node, 'EmailPrestador')
            self.EmailPrestador = EmailPrestador_
            # validate type tpEmail
            self.validate_tpEmail(self.EmailPrestador)
        elif nodeName_ == 'StatusNFe':
            StatusNFe_ = child_.text
            StatusNFe_ = self.gds_validate_string(StatusNFe_, node, 'StatusNFe')
            self.StatusNFe = StatusNFe_
            # validate type tpStatusNFe
            self.validate_tpStatusNFe(self.StatusNFe)
        elif nodeName_ == 'DataCancelamento':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DataCancelamento = dval_
        elif nodeName_ == 'TributacaoNFe':
            TributacaoNFe_ = child_.text
            TributacaoNFe_ = self.gds_validate_string(TributacaoNFe_, node, 'TributacaoNFe')
            self.TributacaoNFe = TributacaoNFe_
            # validate type tpTributacaoNFe
            self.validate_tpTributacaoNFe(self.TributacaoNFe)
        elif nodeName_ == 'OpcaoSimples':
            OpcaoSimples_ = child_.text
            OpcaoSimples_ = self.gds_validate_string(OpcaoSimples_, node, 'OpcaoSimples')
            self.OpcaoSimples = OpcaoSimples_
            # validate type tpOpcaoSimples
            self.validate_tpOpcaoSimples(self.OpcaoSimples)
        elif nodeName_ == 'NumeroGuia' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroGuia')
            self.NumeroGuia = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.NumeroGuia)
        elif nodeName_ == 'DataQuitacaoGuia':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DataQuitacaoGuia = dval_
        elif nodeName_ == 'ValorServicos' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorServicos')
            self.ValorServicos = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorServicos)
        elif nodeName_ == 'ValorDeducoes' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorDeducoes')
            self.ValorDeducoes = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorDeducoes)
        elif nodeName_ == 'ValorPIS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorPIS')
            self.ValorPIS = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorPIS)
        elif nodeName_ == 'ValorCOFINS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCOFINS')
            self.ValorCOFINS = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorCOFINS)
        elif nodeName_ == 'ValorINSS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorINSS')
            self.ValorINSS = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorINSS)
        elif nodeName_ == 'ValorIR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorIR')
            self.ValorIR = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorIR)
        elif nodeName_ == 'ValorCSLL' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCSLL')
            self.ValorCSLL = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorCSLL)
        elif nodeName_ == 'CodigoServico' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoServico')
            self.CodigoServico = ival_
            # validate type tpCodigoServico
            self.validate_tpCodigoServico(self.CodigoServico)
        elif nodeName_ == 'AliquotaServicos' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AliquotaServicos')
            self.AliquotaServicos = fval_
            # validate type tpAliquota
            self.validate_tpAliquota(self.AliquotaServicos)
        elif nodeName_ == 'ValorISS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorISS')
            self.ValorISS = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorISS)
        elif nodeName_ == 'ValorCredito' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCredito')
            self.ValorCredito = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorCredito)
        elif nodeName_ == 'ISSRetido':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ISSRetido')
            self.ISSRetido = ival_
        elif nodeName_ == 'CPFCNPJTomador':
            obj_ = tpCPFCNPJ.factory(parent_object_=self)
            obj_.build(child_)
            self.CPFCNPJTomador = obj_
            obj_.original_tagname_ = 'CPFCNPJTomador'
        elif nodeName_ == 'InscricaoMunicipalTomador' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipalTomador')
            self.InscricaoMunicipalTomador = ival_
            # validate type tpInscricaoMunicipal
            self.validate_tpInscricaoMunicipal(self.InscricaoMunicipalTomador)
        elif nodeName_ == 'InscricaoEstadualTomador' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoEstadualTomador')
            self.InscricaoEstadualTomador = ival_
            # validate type tpInscricaoEstadual
            self.validate_tpInscricaoEstadual(self.InscricaoEstadualTomador)
        elif nodeName_ == 'RazaoSocialTomador':
            RazaoSocialTomador_ = child_.text
            RazaoSocialTomador_ = self.gds_validate_string(RazaoSocialTomador_, node, 'RazaoSocialTomador')
            self.RazaoSocialTomador = RazaoSocialTomador_
            # validate type tpRazaoSocial
            self.validate_tpRazaoSocial(self.RazaoSocialTomador)
        elif nodeName_ == 'EnderecoTomador':
            obj_ = tpEndereco.factory(parent_object_=self)
            obj_.build(child_)
            self.EnderecoTomador = obj_
            obj_.original_tagname_ = 'EnderecoTomador'
        elif nodeName_ == 'EmailTomador':
            EmailTomador_ = child_.text
            EmailTomador_ = self.gds_validate_string(EmailTomador_, node, 'EmailTomador')
            self.EmailTomador = EmailTomador_
            # validate type tpEmail
            self.validate_tpEmail(self.EmailTomador)
        elif nodeName_ == 'CPFCNPJIntermediario':
            obj_ = tpCPFCNPJ.factory(parent_object_=self)
            obj_.build(child_)
            self.CPFCNPJIntermediario = obj_
            obj_.original_tagname_ = 'CPFCNPJIntermediario'
        elif nodeName_ == 'InscricaoMunicipalIntermediario' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipalIntermediario')
            self.InscricaoMunicipalIntermediario = ival_
            # validate type tpInscricaoMunicipal
            self.validate_tpInscricaoMunicipal(self.InscricaoMunicipalIntermediario)
        elif nodeName_ == 'ISSRetidoIntermediario':
            ISSRetidoIntermediario_ = child_.text
            ISSRetidoIntermediario_ = self.gds_validate_string(ISSRetidoIntermediario_, node, 'ISSRetidoIntermediario')
            self.ISSRetidoIntermediario = ISSRetidoIntermediario_
        elif nodeName_ == 'EmailIntermediario':
            EmailIntermediario_ = child_.text
            EmailIntermediario_ = self.gds_validate_string(EmailIntermediario_, node, 'EmailIntermediario')
            self.EmailIntermediario = EmailIntermediario_
            # validate type tpEmail
            self.validate_tpEmail(self.EmailIntermediario)
        elif nodeName_ == 'Discriminacao':
            Discriminacao_ = child_.text
            Discriminacao_ = self.gds_validate_string(Discriminacao_, node, 'Discriminacao')
            self.Discriminacao = Discriminacao_
            # validate type tpDiscriminacao
            self.validate_tpDiscriminacao(self.Discriminacao)
        elif nodeName_ == 'ValorCargaTributaria' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCargaTributaria')
            self.ValorCargaTributaria = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorCargaTributaria)
        elif nodeName_ == 'PercentualCargaTributaria' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PercentualCargaTributaria')
            self.PercentualCargaTributaria = fval_
            # validate type tpPercentualCargaTributaria
            self.validate_tpPercentualCargaTributaria(self.PercentualCargaTributaria)
        elif nodeName_ == 'FonteCargaTributaria':
            FonteCargaTributaria_ = child_.text
            FonteCargaTributaria_ = self.gds_validate_string(FonteCargaTributaria_, node, 'FonteCargaTributaria')
            self.FonteCargaTributaria = FonteCargaTributaria_
            # validate type tpFonteCargaTributaria
            self.validate_tpFonteCargaTributaria(self.FonteCargaTributaria)
        elif nodeName_ == 'CodigoCEI' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoCEI')
            self.CodigoCEI = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.CodigoCEI)
        elif nodeName_ == 'MatriculaObra' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MatriculaObra')
            self.MatriculaObra = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.MatriculaObra)
        elif nodeName_ == 'MunicipioPrestacao' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MunicipioPrestacao')
            self.MunicipioPrestacao = ival_
            # validate type tpCidade
            self.validate_tpCidade(self.MunicipioPrestacao)
        elif nodeName_ == 'NumeroEncapsulamento' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroEncapsulamento')
            self.NumeroEncapsulamento = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.NumeroEncapsulamento)
        elif nodeName_ == 'ValorTotalRecebido' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorTotalRecebido')
            self.ValorTotalRecebido = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorTotalRecebido)
# end class tpNFe


class tpRPS(GeneratedsSuper):
    """Tipo que representa um RPS."""
    subclass = None
    superclass = None
    def __init__(self, Assinatura=None, ChaveRPS=None, TipoRPS=None, DataEmissao=None, StatusRPS=None, TributacaoRPS=None, ValorServicos=None, ValorDeducoes=None, ValorPIS=None, ValorCOFINS=None, ValorINSS=None, ValorIR=None, ValorCSLL=None, CodigoServico=None, AliquotaServicos=None, ISSRetido=None, CPFCNPJTomador=None, InscricaoMunicipalTomador=None, InscricaoEstadualTomador=None, RazaoSocialTomador=None, EnderecoTomador=None, EmailTomador=None, CPFCNPJIntermediario=None, InscricaoMunicipalIntermediario=None, ISSRetidoIntermediario=None, EmailIntermediario=None, Discriminacao=None, ValorCargaTributaria=None, PercentualCargaTributaria=None, FonteCargaTributaria=None, CodigoCEI=None, MatriculaObra=None, MunicipioPrestacao=None, NumeroEncapsulamento=None, ValorTotalRecebido=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Assinatura = Assinatura
        self.validate_tpAssinatura(self.Assinatura)
        self.ChaveRPS = ChaveRPS
        self.TipoRPS = TipoRPS
        self.validate_tpTipoRPS(self.TipoRPS)
        if isinstance(DataEmissao, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataEmissao, '%Y-%m-%d').date()
        else:
            initvalue_ = DataEmissao
        self.DataEmissao = initvalue_
        self.StatusRPS = StatusRPS
        self.validate_tpStatusNFe(self.StatusRPS)
        self.TributacaoRPS = TributacaoRPS
        self.validate_tpTributacaoNFe(self.TributacaoRPS)
        self.ValorServicos = ValorServicos
        self.validate_tpValor(self.ValorServicos)
        self.ValorDeducoes = ValorDeducoes
        self.validate_tpValor(self.ValorDeducoes)
        self.ValorPIS = ValorPIS
        self.validate_tpValor(self.ValorPIS)
        self.ValorCOFINS = ValorCOFINS
        self.validate_tpValor(self.ValorCOFINS)
        self.ValorINSS = ValorINSS
        self.validate_tpValor(self.ValorINSS)
        self.ValorIR = ValorIR
        self.validate_tpValor(self.ValorIR)
        self.ValorCSLL = ValorCSLL
        self.validate_tpValor(self.ValorCSLL)
        self.CodigoServico = CodigoServico
        self.validate_tpCodigoServico(self.CodigoServico)
        self.AliquotaServicos = AliquotaServicos
        self.validate_tpAliquota(self.AliquotaServicos)
        self.ISSRetido = ISSRetido
        self.CPFCNPJTomador = CPFCNPJTomador
        self.InscricaoMunicipalTomador = InscricaoMunicipalTomador
        self.validate_tpInscricaoMunicipal(self.InscricaoMunicipalTomador)
        self.InscricaoEstadualTomador = InscricaoEstadualTomador
        self.validate_tpInscricaoEstadual(self.InscricaoEstadualTomador)
        self.RazaoSocialTomador = RazaoSocialTomador
        self.validate_tpRazaoSocial(self.RazaoSocialTomador)
        self.EnderecoTomador = EnderecoTomador
        self.EmailTomador = EmailTomador
        self.validate_tpEmail(self.EmailTomador)
        self.CPFCNPJIntermediario = CPFCNPJIntermediario
        self.InscricaoMunicipalIntermediario = InscricaoMunicipalIntermediario
        self.validate_tpInscricaoMunicipal(self.InscricaoMunicipalIntermediario)
        self.ISSRetidoIntermediario = ISSRetidoIntermediario
        self.EmailIntermediario = EmailIntermediario
        self.validate_tpEmail(self.EmailIntermediario)
        self.Discriminacao = Discriminacao
        self.validate_tpDiscriminacao(self.Discriminacao)
        self.ValorCargaTributaria = ValorCargaTributaria
        self.validate_tpValor(self.ValorCargaTributaria)
        self.PercentualCargaTributaria = PercentualCargaTributaria
        self.validate_tpPercentualCargaTributaria(self.PercentualCargaTributaria)
        self.FonteCargaTributaria = FonteCargaTributaria
        self.validate_tpFonteCargaTributaria(self.FonteCargaTributaria)
        self.CodigoCEI = CodigoCEI
        self.validate_tpNumero(self.CodigoCEI)
        self.MatriculaObra = MatriculaObra
        self.validate_tpNumero(self.MatriculaObra)
        self.MunicipioPrestacao = MunicipioPrestacao
        self.validate_tpCidade(self.MunicipioPrestacao)
        self.NumeroEncapsulamento = NumeroEncapsulamento
        self.validate_tpNumero(self.NumeroEncapsulamento)
        self.ValorTotalRecebido = ValorTotalRecebido
        self.validate_tpValor(self.ValorTotalRecebido)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpRPS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpRPS.subclass:
            return tpRPS.subclass(*args_, **kwargs_)
        else:
            return tpRPS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tpAssinatura(self, value):
        # Validate type tpAssinatura, a restriction on xs:base64Binary.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_tpTipoRPS(self, value):
        # Validate type tpTipoRPS, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RPS', 'RPS-M', 'RPS-C']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tpTipoRPS' % {"value" : value.encode("utf-8")} )
    def validate_tpStatusNFe(self, value):
        # Validate type tpStatusNFe, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'C', 'E']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tpStatusNFe' % {"value" : value.encode("utf-8")} )
    def validate_tpTributacaoNFe(self, value):
        # Validate type tpTributacaoNFe, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpTributacaoNFe' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpTributacaoNFe' % {"value" : value.encode("utf-8")} )
    def validate_tpValor(self, value):
        # Validate type tpValor, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on tpValor' % {"value" : value} )
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tpValor' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_tpValor_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpValor_patterns_, ))
    validate_tpValor_patterns_ = [['^0|0\\.[0-9]{2}|[1-9]{1}[0-9]{0,12}(\\.[0-9]{0,2})?$']]
    def validate_tpCodigoServico(self, value):
        # Validate type tpCodigoServico, a restriction on xs:int.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpCodigoServico_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpCodigoServico_patterns_, ))
    validate_tpCodigoServico_patterns_ = [['^[0-9]{4,5}$']]
    def validate_tpAliquota(self, value):
        # Validate type tpAliquota, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on tpAliquota' % {"value" : value} )
            if len(str(value)) >= 5:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tpAliquota' % {"value" : value} )
    def validate_tpInscricaoMunicipal(self, value):
        # Validate type tpInscricaoMunicipal, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpInscricaoMunicipal_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpInscricaoMunicipal_patterns_, ))
    validate_tpInscricaoMunicipal_patterns_ = [['^[0-9]{8,8}$']]
    def validate_tpInscricaoEstadual(self, value):
        # Validate type tpInscricaoEstadual, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpInscricaoEstadual_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpInscricaoEstadual_patterns_, ))
    validate_tpInscricaoEstadual_patterns_ = [['^[0-9]{1,19}$']]
    def validate_tpRazaoSocial(self, value):
        # Validate type tpRazaoSocial, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 75:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpRazaoSocial' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpRazaoSocial' % {"value" : value.encode("utf-8")} )
    def validate_tpEmail(self, value):
        # Validate type tpEmail, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 75:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpEmail' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpEmail' % {"value" : value.encode("utf-8")} )
    def validate_tpDiscriminacao(self, value):
        # Validate type tpDiscriminacao, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 2000:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpDiscriminacao' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpDiscriminacao' % {"value" : value.encode("utf-8")} )
    def validate_tpPercentualCargaTributaria(self, value):
        # Validate type tpPercentualCargaTributaria, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on tpPercentualCargaTributaria' % {"value" : value} )
            if len(str(value)) >= 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tpPercentualCargaTributaria' % {"value" : value} )
    def validate_tpFonteCargaTributaria(self, value):
        # Validate type tpFonteCargaTributaria, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpFonteCargaTributaria' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpFonteCargaTributaria' % {"value" : value.encode("utf-8")} )
    def validate_tpNumero(self, value):
        # Validate type tpNumero, a restriction on xs:long.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpNumero_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpNumero_patterns_, ))
    validate_tpNumero_patterns_ = [['^[0-9]{1,12}$']]
    def validate_tpCidade(self, value):
        # Validate type tpCidade, a restriction on xs:int.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpCidade_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpCidade_patterns_, ))
    validate_tpCidade_patterns_ = [['^[0-9]{7}$']]
    def hasContent_(self):
        if (
            self.Assinatura is not None or
            self.ChaveRPS is not None or
            self.TipoRPS is not None or
            self.DataEmissao is not None or
            self.StatusRPS is not None or
            self.TributacaoRPS is not None or
            self.ValorServicos is not None or
            self.ValorDeducoes is not None or
            self.ValorPIS is not None or
            self.ValorCOFINS is not None or
            self.ValorINSS is not None or
            self.ValorIR is not None or
            self.ValorCSLL is not None or
            self.CodigoServico is not None or
            self.AliquotaServicos is not None or
            self.ISSRetido is not None or
            self.CPFCNPJTomador is not None or
            self.InscricaoMunicipalTomador is not None or
            self.InscricaoEstadualTomador is not None or
            self.RazaoSocialTomador is not None or
            self.EnderecoTomador is not None or
            self.EmailTomador is not None or
            self.CPFCNPJIntermediario is not None or
            self.InscricaoMunicipalIntermediario is not None or
            self.ISSRetidoIntermediario is not None or
            self.EmailIntermediario is not None or
            self.Discriminacao is not None or
            self.ValorCargaTributaria is not None or
            self.PercentualCargaTributaria is not None or
            self.FonteCargaTributaria is not None or
            self.CodigoCEI is not None or
            self.MatriculaObra is not None or
            self.MunicipioPrestacao is not None or
            self.NumeroEncapsulamento is not None or
            self.ValorTotalRecebido is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpRPS', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpRPS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tpRPS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tpRPS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tpRPS'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tpRPS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Assinatura is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssinatura>%s</%sAssinatura>%s' % (namespaceprefix_ , self.gds_format_base64(self.Assinatura, input_name='Assinatura'), namespaceprefix_ , eol_))
        if self.ChaveRPS is not None:
            self.ChaveRPS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ChaveRPS', pretty_print=pretty_print)
        if self.TipoRPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTipoRPS>%s</%sTipoRPS>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TipoRPS), input_name='TipoRPS')), namespaceprefix_ , eol_))
        if self.DataEmissao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataEmissao>%s</%sDataEmissao>%s' % (namespaceprefix_ , self.gds_format_date(self.DataEmissao, input_name='DataEmissao'), namespaceprefix_ , eol_))
        if self.StatusRPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusRPS>%s</%sStatusRPS>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusRPS), input_name='StatusRPS')), namespaceprefix_ , eol_))
        if self.TributacaoRPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTributacaoRPS>%s</%sTributacaoRPS>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TributacaoRPS), input_name='TributacaoRPS')), namespaceprefix_ , eol_))
        if self.ValorServicos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorServicos>%s</%sValorServicos>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorServicos, input_name='ValorServicos'), namespaceprefix_ , eol_))
        if self.ValorDeducoes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorDeducoes>%s</%sValorDeducoes>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorDeducoes, input_name='ValorDeducoes'), namespaceprefix_ , eol_))
        if self.ValorPIS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorPIS>%s</%sValorPIS>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorPIS, input_name='ValorPIS'), namespaceprefix_ , eol_))
        if self.ValorCOFINS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCOFINS>%s</%sValorCOFINS>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorCOFINS, input_name='ValorCOFINS'), namespaceprefix_ , eol_))
        if self.ValorINSS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorINSS>%s</%sValorINSS>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorINSS, input_name='ValorINSS'), namespaceprefix_ , eol_))
        if self.ValorIR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorIR>%s</%sValorIR>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorIR, input_name='ValorIR'), namespaceprefix_ , eol_))
        if self.ValorCSLL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCSLL>%s</%sValorCSLL>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorCSLL, input_name='ValorCSLL'), namespaceprefix_ , eol_))
        if self.CodigoServico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoServico>%s</%sCodigoServico>%s' % (namespaceprefix_ , self.gds_format_integer(self.CodigoServico, input_name='CodigoServico'), namespaceprefix_ , eol_))
        if self.AliquotaServicos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAliquotaServicos>%s</%sAliquotaServicos>%s' % (namespaceprefix_ , self.gds_format_float(self.AliquotaServicos, input_name='AliquotaServicos'), namespaceprefix_ , eol_))
        if self.ISSRetido is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISSRetido>%s</%sISSRetido>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ISSRetido, input_name='ISSRetido'), namespaceprefix_ , eol_))
        if self.CPFCNPJTomador is not None:
            self.CPFCNPJTomador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CPFCNPJTomador', pretty_print=pretty_print)
        if self.InscricaoMunicipalTomador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipalTomador>%s</%sInscricaoMunicipalTomador>%s' % (namespaceprefix_ , self.gds_format_integer(self.InscricaoMunicipalTomador, input_name='InscricaoMunicipalTomador'), namespaceprefix_ , eol_))
        if self.InscricaoEstadualTomador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoEstadualTomador>%s</%sInscricaoEstadualTomador>%s' % (namespaceprefix_ , self.gds_format_integer(self.InscricaoEstadualTomador, input_name='InscricaoEstadualTomador'), namespaceprefix_ , eol_))
        if self.RazaoSocialTomador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRazaoSocialTomador>%s</%sRazaoSocialTomador>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RazaoSocialTomador), input_name='RazaoSocialTomador')), namespaceprefix_ , eol_))
        if self.EnderecoTomador is not None:
            self.EnderecoTomador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EnderecoTomador', pretty_print=pretty_print)
        if self.EmailTomador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailTomador>%s</%sEmailTomador>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailTomador), input_name='EmailTomador')), namespaceprefix_ , eol_))
        if self.CPFCNPJIntermediario is not None:
            self.CPFCNPJIntermediario.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CPFCNPJIntermediario', pretty_print=pretty_print)
        if self.InscricaoMunicipalIntermediario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipalIntermediario>%s</%sInscricaoMunicipalIntermediario>%s' % (namespaceprefix_ , self.gds_format_integer(self.InscricaoMunicipalIntermediario, input_name='InscricaoMunicipalIntermediario'), namespaceprefix_ , eol_))
        if self.ISSRetidoIntermediario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISSRetidoIntermediario>%s</%sISSRetidoIntermediario>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISSRetidoIntermediario), input_name='ISSRetidoIntermediario')), namespaceprefix_ , eol_))
        if self.EmailIntermediario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailIntermediario>%s</%sEmailIntermediario>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailIntermediario), input_name='EmailIntermediario')), namespaceprefix_ , eol_))
        if self.Discriminacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDiscriminacao>%s</%sDiscriminacao>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Discriminacao), input_name='Discriminacao')), namespaceprefix_ , eol_))
        if self.ValorCargaTributaria is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCargaTributaria>%s</%sValorCargaTributaria>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorCargaTributaria, input_name='ValorCargaTributaria'), namespaceprefix_ , eol_))
        if self.PercentualCargaTributaria is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentualCargaTributaria>%s</%sPercentualCargaTributaria>%s' % (namespaceprefix_ , self.gds_format_float(self.PercentualCargaTributaria, input_name='PercentualCargaTributaria'), namespaceprefix_ , eol_))
        if self.FonteCargaTributaria is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFonteCargaTributaria>%s</%sFonteCargaTributaria>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FonteCargaTributaria), input_name='FonteCargaTributaria')), namespaceprefix_ , eol_))
        if self.CodigoCEI is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoCEI>%s</%sCodigoCEI>%s' % (namespaceprefix_ , self.gds_format_integer(self.CodigoCEI, input_name='CodigoCEI'), namespaceprefix_ , eol_))
        if self.MatriculaObra is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMatriculaObra>%s</%sMatriculaObra>%s' % (namespaceprefix_ , self.gds_format_integer(self.MatriculaObra, input_name='MatriculaObra'), namespaceprefix_ , eol_))
        if self.MunicipioPrestacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMunicipioPrestacao>%s</%sMunicipioPrestacao>%s' % (namespaceprefix_ , self.gds_format_integer(self.MunicipioPrestacao, input_name='MunicipioPrestacao'), namespaceprefix_ , eol_))
        if self.NumeroEncapsulamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroEncapsulamento>%s</%sNumeroEncapsulamento>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroEncapsulamento, input_name='NumeroEncapsulamento'), namespaceprefix_ , eol_))
        if self.ValorTotalRecebido is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorTotalRecebido>%s</%sValorTotalRecebido>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorTotalRecebido, input_name='ValorTotalRecebido'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Assinatura':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Assinatura')
            else:
                bval_ = None
            self.Assinatura = bval_
            # validate type tpAssinatura
            self.validate_tpAssinatura(self.Assinatura)
        elif nodeName_ == 'ChaveRPS':
            obj_ = tpChaveRPS.factory(parent_object_=self)
            obj_.build(child_)
            self.ChaveRPS = obj_
            obj_.original_tagname_ = 'ChaveRPS'
        elif nodeName_ == 'TipoRPS':
            TipoRPS_ = child_.text
            TipoRPS_ = self.gds_validate_string(TipoRPS_, node, 'TipoRPS')
            self.TipoRPS = TipoRPS_
            # validate type tpTipoRPS
            self.validate_tpTipoRPS(self.TipoRPS)
        elif nodeName_ == 'DataEmissao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DataEmissao = dval_
        elif nodeName_ == 'StatusRPS':
            StatusRPS_ = child_.text
            StatusRPS_ = self.gds_validate_string(StatusRPS_, node, 'StatusRPS')
            self.StatusRPS = StatusRPS_
            # validate type tpStatusNFe
            self.validate_tpStatusNFe(self.StatusRPS)
        elif nodeName_ == 'TributacaoRPS':
            TributacaoRPS_ = child_.text
            TributacaoRPS_ = self.gds_validate_string(TributacaoRPS_, node, 'TributacaoRPS')
            self.TributacaoRPS = TributacaoRPS_
            # validate type tpTributacaoNFe
            self.validate_tpTributacaoNFe(self.TributacaoRPS)
        elif nodeName_ == 'ValorServicos' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorServicos')
            self.ValorServicos = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorServicos)
        elif nodeName_ == 'ValorDeducoes' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorDeducoes')
            self.ValorDeducoes = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorDeducoes)
        elif nodeName_ == 'ValorPIS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorPIS')
            self.ValorPIS = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorPIS)
        elif nodeName_ == 'ValorCOFINS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCOFINS')
            self.ValorCOFINS = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorCOFINS)
        elif nodeName_ == 'ValorINSS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorINSS')
            self.ValorINSS = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorINSS)
        elif nodeName_ == 'ValorIR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorIR')
            self.ValorIR = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorIR)
        elif nodeName_ == 'ValorCSLL' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCSLL')
            self.ValorCSLL = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorCSLL)
        elif nodeName_ == 'CodigoServico' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoServico')
            self.CodigoServico = ival_
            # validate type tpCodigoServico
            self.validate_tpCodigoServico(self.CodigoServico)
        elif nodeName_ == 'AliquotaServicos' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AliquotaServicos')
            self.AliquotaServicos = fval_
            # validate type tpAliquota
            self.validate_tpAliquota(self.AliquotaServicos)
        elif nodeName_ == 'ISSRetido':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ISSRetido')
            self.ISSRetido = ival_
        elif nodeName_ == 'CPFCNPJTomador':
            obj_ = tpCPFCNPJ.factory(parent_object_=self)
            obj_.build(child_)
            self.CPFCNPJTomador = obj_
            obj_.original_tagname_ = 'CPFCNPJTomador'
        elif nodeName_ == 'InscricaoMunicipalTomador' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipalTomador')
            self.InscricaoMunicipalTomador = ival_
            # validate type tpInscricaoMunicipal
            self.validate_tpInscricaoMunicipal(self.InscricaoMunicipalTomador)
        elif nodeName_ == 'InscricaoEstadualTomador' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoEstadualTomador')
            self.InscricaoEstadualTomador = ival_
            # validate type tpInscricaoEstadual
            self.validate_tpInscricaoEstadual(self.InscricaoEstadualTomador)
        elif nodeName_ == 'RazaoSocialTomador':
            RazaoSocialTomador_ = child_.text
            RazaoSocialTomador_ = self.gds_validate_string(RazaoSocialTomador_, node, 'RazaoSocialTomador')
            self.RazaoSocialTomador = RazaoSocialTomador_
            # validate type tpRazaoSocial
            self.validate_tpRazaoSocial(self.RazaoSocialTomador)
        elif nodeName_ == 'EnderecoTomador':
            obj_ = tpEndereco.factory(parent_object_=self)
            obj_.build(child_)
            self.EnderecoTomador = obj_
            obj_.original_tagname_ = 'EnderecoTomador'
        elif nodeName_ == 'EmailTomador':
            EmailTomador_ = child_.text
            EmailTomador_ = self.gds_validate_string(EmailTomador_, node, 'EmailTomador')
            self.EmailTomador = EmailTomador_
            # validate type tpEmail
            self.validate_tpEmail(self.EmailTomador)
        elif nodeName_ == 'CPFCNPJIntermediario':
            obj_ = tpCPFCNPJ.factory(parent_object_=self)
            obj_.build(child_)
            self.CPFCNPJIntermediario = obj_
            obj_.original_tagname_ = 'CPFCNPJIntermediario'
        elif nodeName_ == 'InscricaoMunicipalIntermediario' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipalIntermediario')
            self.InscricaoMunicipalIntermediario = ival_
            # validate type tpInscricaoMunicipal
            self.validate_tpInscricaoMunicipal(self.InscricaoMunicipalIntermediario)
        elif nodeName_ == 'ISSRetidoIntermediario':
            ISSRetidoIntermediario_ = child_.text
            ISSRetidoIntermediario_ = self.gds_validate_string(ISSRetidoIntermediario_, node, 'ISSRetidoIntermediario')
            self.ISSRetidoIntermediario = ISSRetidoIntermediario_
        elif nodeName_ == 'EmailIntermediario':
            EmailIntermediario_ = child_.text
            EmailIntermediario_ = self.gds_validate_string(EmailIntermediario_, node, 'EmailIntermediario')
            self.EmailIntermediario = EmailIntermediario_
            # validate type tpEmail
            self.validate_tpEmail(self.EmailIntermediario)
        elif nodeName_ == 'Discriminacao':
            Discriminacao_ = child_.text
            Discriminacao_ = self.gds_validate_string(Discriminacao_, node, 'Discriminacao')
            self.Discriminacao = Discriminacao_
            # validate type tpDiscriminacao
            self.validate_tpDiscriminacao(self.Discriminacao)
        elif nodeName_ == 'ValorCargaTributaria' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCargaTributaria')
            self.ValorCargaTributaria = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorCargaTributaria)
        elif nodeName_ == 'PercentualCargaTributaria' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PercentualCargaTributaria')
            self.PercentualCargaTributaria = fval_
            # validate type tpPercentualCargaTributaria
            self.validate_tpPercentualCargaTributaria(self.PercentualCargaTributaria)
        elif nodeName_ == 'FonteCargaTributaria':
            FonteCargaTributaria_ = child_.text
            FonteCargaTributaria_ = self.gds_validate_string(FonteCargaTributaria_, node, 'FonteCargaTributaria')
            self.FonteCargaTributaria = FonteCargaTributaria_
            # validate type tpFonteCargaTributaria
            self.validate_tpFonteCargaTributaria(self.FonteCargaTributaria)
        elif nodeName_ == 'CodigoCEI' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoCEI')
            self.CodigoCEI = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.CodigoCEI)
        elif nodeName_ == 'MatriculaObra' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MatriculaObra')
            self.MatriculaObra = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.MatriculaObra)
        elif nodeName_ == 'MunicipioPrestacao' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MunicipioPrestacao')
            self.MunicipioPrestacao = ival_
            # validate type tpCidade
            self.validate_tpCidade(self.MunicipioPrestacao)
        elif nodeName_ == 'NumeroEncapsulamento' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroEncapsulamento')
            self.NumeroEncapsulamento = ival_
            # validate type tpNumero
            self.validate_tpNumero(self.NumeroEncapsulamento)
        elif nodeName_ == 'ValorTotalRecebido' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorTotalRecebido')
            self.ValorTotalRecebido = fval_
            # validate type tpValor
            self.validate_tpValor(self.ValorTotalRecebido)
# end class tpRPS


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tpEvento'
        rootClass = tpEvento
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tipos="http://www.prefeitura.sp.gov.br/nfe/tipos"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tpEvento'
        rootClass = tpEvento
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tpEvento'
        rootClass = tpEvento
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tipos="http://www.prefeitura.sp.gov.br/nfe/tipos"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tpEvento'
        rootClass = tpEvento
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from TiposNFe_v01 import *\n\n')
        sys.stdout.write('import TiposNFe_v01 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "tpCPFCNPJ",
    "tpChaveNFe",
    "tpChaveNFeRPS",
    "tpChaveRPS",
    "tpEndereco",
    "tpEvento",
    "tpInformacoesLote",
    "tpNFe",
    "tpRPS"
]
